{"ast":null,"code":"var _jsxFileName = \"/home/lrodrigues/Desktop/Investimento/juros/src/jurosComp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { render } from \"react-dom\";\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport Table from '@mui/material/Table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Row({\n  index,\n  value\n}) {\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: index + 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Row;\n\nfunction generator(months, interest, initial) {\n  let rounds = 0;\n  const list = [];\n\n  while (rounds < months) {\n    initial = initial + initial * interest / 100;\n    list.push(initial);\n    rounds++;\n  }\n\n  return list;\n}\n\nexport function CompoundInterest() {\n  _s();\n\n  const [initial, setInitial] = useState();\n  const [months, setMonths] = useState();\n  const [interest, setInterest] = useState();\n  const [result, setResult] = useState();\n  const [table, setTable] = useState([]);\n\n  const calculate = () => {\n    const parsedMonth = parseFloat(months) || 0;\n    const parsedInterest = parseFloat(interest) || 0;\n    const parsedInitial = parseFloat(initial) || 0;\n    setTable(generator(parsedMonth, parsedInterest, parsedInitial));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"initial value\",\n        variant: \"outlined\",\n        type: \"number\",\n        onChange: e => setInitial(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Simple Monthly Interest\",\n        variant: \"outlined\",\n        type: \"number\",\n        onChange: e => setInterest(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Number of months\",\n        variant: \"outlined\",\n        type: \"number\",\n        onChange: e => setMonths(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => {\n          calculate();\n        },\n        children: \"Calculate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: \"30px\"\n        },\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              id: \"monthPos\",\n              children: \" MONTH:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              id: \"interestPos\",\n              children: \"INTEREST:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: table.map((element, index) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: element\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 17\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CompoundInterest, \"gTRtkpCD8Fk3uXJOwATJzpRHvpM=\");\n\n_c2 = CompoundInterest;\n;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Row\");\n$RefreshReg$(_c2, \"CompoundInterest\");","map":{"version":3,"sources":["/home/lrodrigues/Desktop/Investimento/juros/src/jurosComp.js"],"names":["React","useState","render","TextField","Button","Table","Row","index","value","generator","months","interest","initial","rounds","list","push","CompoundInterest","setInitial","setMonths","setInterest","result","setResult","table","setTable","calculate","parsedMonth","parseFloat","parsedInterest","parsedInitial","e","target","fontSize","map","element"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { render } from \"react-dom\";\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport Table from '@mui/material/Table';\n\n\nfunction Row({ index, value }) {\n  return (\n    <tr>\n      <td>\n        {index + 1}\n      </td>\n      <td>\n        {value}\n      </td>\n    </tr>\n  );\n}\n\nfunction generator(months, interest, initial) {\n  let rounds = 0;\n  const list = []\n  while (rounds < months) {\n    initial = initial + (initial * interest / 100)\n    list.push(initial)\n    rounds++;\n  }\n  return list;\n}\n\nexport function CompoundInterest() {\n  const [initial, setInitial] = useState();\n  const [months, setMonths] = useState();\n  const [interest, setInterest] = useState();\n  const [result, setResult] = useState();\n  const [table, setTable] = useState([]);\n\n  const calculate = () => {\n    const parsedMonth = parseFloat(months) || 0;\n    const parsedInterest = parseFloat(interest) || 0;\n    const parsedInitial = parseFloat(initial) || 0;\n    setTable(generator(parsedMonth, parsedInterest, parsedInitial));\n  };\n\n  return (\n    <div>\n      <form>\n        <TextField\n          label=\"initial value\"\n          variant=\"outlined\"\n          type=\"number\"\n          onChange={(e) => setInitial(e.target.value)}\n        />\n        <TextField\n          label=\"Simple Monthly Interest\"\n          variant=\"outlined\"\n          type=\"number\"\n          onChange={(e) => setInterest(e.target.value)}\n        />\n        <TextField\n          label=\"Number of months\"\n          variant=\"outlined\"\n          type=\"number\"\n          onChange={(e) => setMonths(e.target.value)}\n        />\n        <br />\n        <br />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            calculate();\n          }}\n        >\n          Calculate\n        </Button>\n        <br />\n        <br />\n        <div style={{ fontSize: \"30px\" }}>{result}</div>\n      </form>\n      <div class=\"container\">\n      <Table>\n        <thead>\n          <tr>\n            <th id =\"monthPos\"> MONTH:</th>\n            <th id =\"interestPos\">INTEREST:</th>\n          </tr>\n        </thead>\n        <tbody>\n          {table.map((element, index) => {\n            return (\n              <tr key={index}>\n                <td>\n                  {index + 1}\n                </td>\n                <td>\n                  {element}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n      </div>\n    </div>\n  );\n};"]},"metadata":{},"sourceType":"module"}