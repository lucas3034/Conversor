{"ast":null,"code":"var _jsxFileName = \"/home/lrodrigues/Desktop/Investimento/juros/src/convJuros.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './style.css'; //Convertor Simple\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction convertToMonthlySimple(annualValueSimple) {\n  return annualValueSimple / 12;\n}\n\nfunction convertToAnnualSimple(monthlyValueSimple) {\n  return monthlyValueSimple * 12;\n}\n\nfunction ConverterInput({\n  label,\n  amount,\n  onChange\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      labelfor: label,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: label,\n      name: label,\n      type: \"number\",\n      value: amount,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_c = ConverterInput;\nexport function Simple() {\n  _s();\n\n  const [monthlySimple, setMonthlySimple] = useState(0);\n  const [annualSimple, setAnnualSimple] = useState(0);\n\n  const onChange = evt => {\n    const value = parseFloat(evt.target.value) || 0;\n\n    if (evt.target.name === ' Simple Monthly Interest ') {\n      setMonthlySimple(value);\n    } else if (evt.target.name === ' Simple Annual Interest  ') {\n      setMonthlySimple(convertToMonthlySimple(value));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bar1\",\n    children: [/*#__PURE__*/_jsxDEV(ConverterInput, {\n      label: \" Simple Annual Interest  \",\n      amount: convertToAnnualSimple(monthlySimple),\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bar2\",\n      children: /*#__PURE__*/_jsxDEV(ConverterInput, {\n        label: \" Simple Monthly Interest \",\n        amount: monthlySimple,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n} //Convertor Compound\n\n_s(Simple, \"+WNrJ3jUgz7W7a0NgU2psqrP0+c=\");\n\n_c2 = Simple;\n\nfunction convertToMonthlyCompound(annualValueCompound) {\n  const total = ((1 + annualValueCompound / 100) ** (1 / 12) - 1) * 100;\n  return total; //.toFixed(2);\n}\n\nfunction convertToAnnualCompound(monthlyValueCompound) {\n  const total2 = ((1 + monthlyValueCompound / 100) ** 12 - 1) * 100;\n  return total2; //.toFixed(2);\n}\n\nexport function Compound() {\n  _s2();\n\n  const [monthlyCompound, setMonthlyCompound] = useState(0);\n  const [annualCompound, setAnnualCompound] = useState(0);\n\n  const onChange = evt => {\n    const value = parseFloat(evt.target.value) || 0;\n\n    if (evt.target.name === ' Compound Monthly Interest ') {\n      setMonthlyCompound(value);\n    } else if (evt.target.name === ' Compound Annual Interest ') {\n      setMonthlyCompound(convertToMonthlyCompound(value));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bar1\",\n    children: [/*#__PURE__*/_jsxDEV(ConverterInput, {\n      label: \" Compound Annual Interest \",\n      amount: convertToAnnualCompound(monthlyCompound),\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bar2\",\n      children: /*#__PURE__*/_jsxDEV(ConverterInput, {\n        label: \" Compound Monthly Interest \",\n        amount: monthlyCompound,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Compound, \"0uecMpXDcZYGG5Kx8Pw4YhYuuNA=\");\n\n_c3 = Compound;\nexport function Main() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interest Converter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Simple, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Compound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_c4 = Main;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ConverterInput\");\n$RefreshReg$(_c2, \"Simple\");\n$RefreshReg$(_c3, \"Compound\");\n$RefreshReg$(_c4, \"Main\");","map":{"version":3,"sources":["/home/lrodrigues/Desktop/Investimento/juros/src/convJuros.js"],"names":["React","useState","convertToMonthlySimple","annualValueSimple","convertToAnnualSimple","monthlyValueSimple","ConverterInput","label","amount","onChange","Simple","monthlySimple","setMonthlySimple","annualSimple","setAnnualSimple","evt","value","parseFloat","target","name","convertToMonthlyCompound","annualValueCompound","total","convertToAnnualCompound","monthlyValueCompound","total2","Compound","monthlyCompound","setMonthlyCompound","annualCompound","setAnnualCompound","Main"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './style.css';\n\n\n//Convertor Simple\n\n\nfunction convertToMonthlySimple(annualValueSimple) {\n  return (annualValueSimple / 12);\n}\n\nfunction convertToAnnualSimple(monthlyValueSimple) {\n  return (monthlyValueSimple * 12);\n}\n\nfunction ConverterInput({ label, amount, onChange }) {\n  return (\n    <>\n      <label labelfor={label}>{label}</label>\n      <input\n        id={label}\n        name={label}\n        type=\"number\"\n        value={amount}\n        onChange={onChange}\n      />\n    </>\n  );\n\n}\n\n\nexport function Simple() {\n\n  const [monthlySimple, setMonthlySimple] = useState(0);\n  const [annualSimple, setAnnualSimple] = useState(0);\n\n  const onChange = (evt) => {\n    const value = parseFloat(evt.target.value) || 0;\n\n    if (evt.target.name === ' Simple Monthly Interest ') {\n      setMonthlySimple(value);\n    } else if (evt.target.name === ' Simple Annual Interest  ') {\n      setMonthlySimple(convertToMonthlySimple(value));\n    }\n  }\n\n  return (\n    <div className=\"bar1\">\n      <ConverterInput\n        label=\" Simple Annual Interest  \"\n        amount={convertToAnnualSimple(monthlySimple)}\n        onChange={onChange}\n      />\n      <div className=\"bar2\">\n        <ConverterInput\n          label=\" Simple Monthly Interest \"\n          amount={monthlySimple}\n          onChange={onChange}\n        />\n      </div>\n    </div>\n  );\n}\n\n//Convertor Compound\n\nfunction convertToMonthlyCompound(annualValueCompound) {\n  const total = ((1 + (annualValueCompound / 100)) ** (1 / 12) - 1) * 100;\n  return total; //.toFixed(2);\n}\n\nfunction convertToAnnualCompound(monthlyValueCompound) {\n  const total2 = ((1 + (monthlyValueCompound / 100)) ** 12 - 1) * 100;\n  return total2; //.toFixed(2);\n}\n\nexport function Compound() {\n  const [monthlyCompound, setMonthlyCompound] = useState(0);\n  const [annualCompound, setAnnualCompound] = useState(0);\n\n  const onChange = (evt) => {\n    const value = parseFloat(evt.target.value) || 0;\n\n    if (evt.target.name === ' Compound Monthly Interest ') {\n      setMonthlyCompound(value);\n    } else if (evt.target.name === ' Compound Annual Interest ') {\n      setMonthlyCompound(convertToMonthlyCompound(value));\n    }\n  }\n\n  return (\n    <div className=\"bar1\">\n      <ConverterInput\n        label=\" Compound Annual Interest \"\n        amount={convertToAnnualCompound(monthlyCompound)}\n        onChange={onChange}\n      />\n      <div className=\"bar2\">\n        <ConverterInput\n          label=\" Compound Monthly Interest \"\n          amount={monthlyCompound}\n          onChange={onChange}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function Main() {\n  return (\n\n    <div>\n      <h1>Interest Converter</h1>\n      <br />\n      <Simple />\n      <br />\n      <hr />\n      <br />\n      <br />\n      <Compound />\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}